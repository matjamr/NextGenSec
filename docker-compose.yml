version: '3.8'
services:
#  service-orchestrator:
#    image: service-orchestrator:latest
#    build:
#      context: ./service-orchestrator
#      dockerfile: Dockerfile
#    ports:
#      - 8080:8080
#    environment:
#      - POSTGRES_HOST=${POSTGRES_HOST}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_URL=${POSTGRES_URL}
#      - CLIENT_ID=${CLIENT_ID}
#      - CLIENT_SECRET=${CLIENT_SECRET}
#      - KAFKA_URL=${KAFKA_URL}
#      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
#      - SERVER_URL=${SERVER_URL}
#    network_mode: host
  db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db
    ports:
      - '5432:5432'
    volumes:
      - db:/var/lib/postgresql/data
#    network_mode: host
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "test:1:1"
    depends_on:
      - zookeeper
#    network_mode: host
volumes:
  db:
    driver: local
